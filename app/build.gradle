apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        applicationId "com.example.testbuildervm"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet true
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings true
        // if true, emit full/absolute paths to files with errors (true by default)
        //absolutePaths true
        // if true, check all issues, including those that are off by default
        checkAllWarnings true
        // if true, treat all warnings as errors
        warningsAsErrors true
        // turn off checking the given issue id's
        disable 'TypographyFractions','TypographyQuotes'
        // turn on the given issue id's
        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
        // check *only* the given issue id's
        check 'NewApi', 'InlinedApi'
        // if true, don't include source code lines in the error output
        noLines true
        // if true, show all locations for an error, do not truncate lists, etc.
        showAll true
        // Fallback lint configuration (default severities, etc.)
        lintConfig file("default-lint.xml")
        // if true, generate a text report of issues (false by default)
        textReport true
        // location to write the output; can be a file or 'stdout'
        textOutput 'stdout'
        // if true, generate an XML report for use by for example Jenkins
        xmlReport true
        // file to write report to (if not specified, defaults to lint-results.xml)
        xmlOutput file("lint-report.xml")
        // if true, generate an HTML report (with issue explanations, sourcecode, etc)
        htmlReport false
        // optional path to report (default will be lint-results.html in the builddir)
        htmlOutput file("lint-report.html")
    }

}

buildscript {
    ext {
        androidLibGroupName = "com.android.support"

        androidLibVersion = "28.0.0"
    }
}

repositories {
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':wallpaper')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "$androidLibGroupName:recyclerview-v7:$androidLibVersion"
    implementation "$androidLibGroupName:design:$androidLibVersion"
    implementation "$androidLibGroupName:cardview-v7:$androidLibVersion"
    implementation "$androidLibGroupName:appcompat-v7:$androidLibVersion"
    implementation "$androidLibGroupName:support-v4:$androidLibVersion"
    implementation "$androidLibGroupName:preference-v7:$androidLibVersion"
    implementation "$androidLibGroupName:exifinterface:$androidLibVersion"
    implementation "$androidLibGroupName:support-annotations:$androidLibVersion"
    implementation "${androidLibGroupName}.constraint:constraint-layout:1.1.2"
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'

    testImplementation "junit:junit:4.12"
    androidTestImplementation "com.android.support:support-annotations:28.0.0"
    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "com.android.support.test:rules:1.0.2"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"

}
